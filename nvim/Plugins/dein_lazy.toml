[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = 'nvim-cmp'
hook_post_source = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
call skkeleton#config({
\	'globalDictionaries': ['/usr/share/skk/SKK-JISYO.L'],
\	'userDictionaries': ['~/.local/share/fcitx5/skk/user.dict'],
\	'debug': v:true
\ })
'''

[[plugins]]
repo = 'rinx/cmp-skkeleton'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'previm/previm'
on_command = 'PrevimOpen'
hook_add = '''
let g:previm_open_cmd = "firefox"
let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = 'InsertEnter'

[[plugins]]
repo = 'dstein64/vim-startuptime'
on_command = 'StartupTime'

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
on_event = 'InsertEnter'
hook_post_source = '''
lua << EOF
local cfg = {
}
require "lsp_signature".setup(cfg)
require "lsp_signature".on_attach()
EOF
'''

[[plugins]]
repo = 'mbbill/undotree'
on_command = 'UndotreeToggle'
hook_add = '''
nnoremap <C-u> :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
on_command = ['AerialPrev', 'AerialNext', 'AerialToggle']
hook_add = '''
lua << EOF
vim.keymap.set('n', '{', '<cmd>AerialPrev<CR>', {buffer = bufnr})
vim.keymap.set('n', '}', '<cmd>AerialNext<CR>', {buffer = bufnr})
vim.keymap.set('n', '<C-h>', '<cmd>AerialToggle! left<CR>')
EOF
'''
hook_post_source = '''
lua << EOF
require('aerial').setup({
on_attach = function(bufnr)
end
})
EOF
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'
on_event = 'InsertEnter'

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
on_command = 'ToggleTerm'
hook_add = '''
nnoremap <C-t> :ToggleTerm<CR>
'''
hook_post_source = '''
lua << EOF
require("toggleterm").setup{
	open_mapping = "<C-t>",
	start_in_insert = true,
	insert_mappings = true,
	terminal_mappings = true,
	direction = "horizontal"
}
EOF
'''

[[plugins]]
repo = 'junegunn/fzf'
on_source = 'fzf.vim'
on_build = 'fzf#install()'

[[plugins]]
repo = 'junegunn/fzf.vim'
on_command = ['Buffers', 'Files', 'Rg']
hook_add = '''
nnoremap <C-l> :Buffers<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['FocusLost', 'CursorHold']
hook_post_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
	highlight = {
		enable = true,
		disable = {
			"cpp",
		}
	},
	indent = {
		enable = false,
	}
}
EOF
'''

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'L3MON4D3/LuaSnip'
on_source = 'nvim-cmp'
build = "make install_jsregexp"

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'saadparwaiz1/cmp_luasnip'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'onsails/lspkind.nvim'
on_source = 'nvim-cmp'

[[plugins]] 
repo = 'hrsh7th/nvim-cmp'
on_event = 'InsertEnter'
hook_post_source = '''
lua << EOF
local cmp = require('cmp')
local lspkind = require("lspkind")
cmp.setup({
	snippet = {
		expand = function(args)
			require'luasnip'.lsp_expand(args.body)
		end,
	},
	sources = {
		{ name = 'nvim_lsp' },
		{ name = 'luasnip' },
		{ name = 'buffer' },
		{ name = 'path' },
		{ name = 'skkeleton' },
	},
	mapping = cmp.mapping.preset.insert({
		["<C-p>"] = cmp.mapping.select_prev_item(),
		["<S-Tab>"] = cmp.mapping.select_prev_item(),
		["<C-n>"] = cmp.mapping.select_next_item(),
		["<Tab>"] = cmp.mapping.select_next_item(),
		['<C-l>'] = cmp.mapping.complete(),
		['<C-e>'] = cmp.mapping.abort(),
		["<C-k>"] = cmp.mapping.confirm { select = true },
	}),
	formatting = {
		format = lspkind.cmp_format({
			mode = 'symbol',
			maxwidth = 50,
			ellipsis_char = '...',
			before = function(entry, vim_item)
				return vim_item
			end,
		}),
	},
	view = {
		entries = 'native'
	},
	experimental = {
		ghost_text = true,
	},
})
vim.cmd([[imap <silent><expr> <C-k> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<C-k>']])
EOF
'''
