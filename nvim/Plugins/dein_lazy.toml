[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
depends = ['nvim-lspconfig', 'mason.nvim', 'mason-lspconfig.nvim', 'ddc-ui-pum', 'ddc-source-lsp', 'pum.vim']
hook_post_source = '''
	call ddc#custom#patch_global({
	\	'ui': 'pum',
	\	'sources': ['nvim-lsp', 'skkeleton', 'around'],
	\	'sourceOptions': { 
	\		'_': {
	\			'matchers': ['matcher_head'],
	\			'sorters': ['sorter_rank']
	\		},
	\		nvim-lsp: {
	\			mark: 'L',
	\			forceCompletionPattern: '\.\w*|:\w*|->\w*'
	\		}, 
	\		'around': {
	\			'mark': 'A'
	\		},
	\		'skkeleton': {
	\			'mark': 'S',
	\			'matchers': ['skkeleton'],
	\			'sorters':[]
	\		},
	\	},
	\	'sourceParams: #{
	\		nvim-lsp: #{
	\			enableResolveItem: v:true,
    \			enableAdditionalTextEdit: v:true,
    \			confirmBehavior: 'replace',
	\		},
	\	},
	\	'autoCompleteEvents': [
	\		'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged',
	\	],
	\	'cmdlineSources': {
	\		':': ['cmdline', 'cmdline-history', 'around']
	\	},
	\	})
	inoremap <silent><expr> <TAB>
		\ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
		\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
		\ '<TAB>' : ddc#map#manual_complete()
	inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
	inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
	inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
	inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
	inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

	nnoremap :       <Cmd>call CommandlinePre()<CR>:
	function! CommandlinePre() abort
		cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
		cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
		cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
		cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
		cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
		cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
		autocmd User DDCCmdlineLeave ++once call CommandlinePost()
		" Enable command line completion for the buffer
		call ddc#enable_cmdline_completion()
	endfunction
	function! CommandlinePost() abort
		silent! cunmap <Tab>
		silent! cunmap <S-Tab>
		silent! cunmap <C-n>
		silent! cunmap <C-p>
		silent! cunmap <C-y>
		silent! cunmap <C-e>
	endfunction
	call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = ['ddc.vim', 'denops-popup-preview.vim']
hook_post_source = '''
lua << EOF
local capabilities = require("ddc_nvim_lsp").make_client_capabilities()
require("lspconfig").denols.setup({
  capabilities = capabilities,
})
EOF
'''

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = 'ddc.vim'
hook_post_source = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
call skkeleton#config({
\	'globalJisyo': '/usr/share/skk/SKK-JISYO.L',
\	'userJisyo': '~/.local/share/fcitx5/skk/user.dict'
\})
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = ['ddc.vim', 'ddc-ui-pum']

[[plugins]]
repo = 'previm/previm'
on_command = 'PrevimOpen'
hook_add = '''
let g:previm_open_cmd = "firefox"
let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = 'InsertEnter'

[[plugins]]
repo = 'dstein64/vim-startuptime'
on_command = 'StartupTime'

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
on_event = 'InsertEnter'
hook_post_source = '''
lua << EOF
local cfg = {
}
require "lsp_signature".setup(cfg)
require "lsp_signature".on_attach()
EOF
'''

[[plugins]]
repo = 'mbbill/undotree'
on_command = 'UndotreeToggle'
hook_add = '''
nnoremap <C-u> :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
on_command = ['AerialPrev', 'AerialNext', 'AerialToggle']
hook_add = '''
lua << EOF
vim.keymap.set('n', '{', '<cmd>AerialPrev<CR>', {buffer = bufnr})
vim.keymap.set('n', '}', '<cmd>AerialNext<CR>', {buffer = bufnr})
vim.keymap.set('n', '<C-h>', '<cmd>AerialToggle! left<CR>')
EOF
'''
hook_post_source = '''
lua << EOF
require('aerial').setup({
on_attach = function(bufnr)
end
})
EOF
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'
on_event = 'InsertEnter'

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
on_command = 'ToggleTerm'
hook_add = '''
nnoremap <C-t> :ToggleTerm<CR>
'''
hook_post_source = '''
lua << EOF
require("toggleterm").setup{
	open_mapping = "<C-t>",
	start_in_insert = true,
	insert_mappings = true,
	terminal_mappings = true,
	direction = "horizontal"
}
EOF
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
on_event = ['FocusLost', 'CursorHold']
hook_add = '''
nnoremap <C-l> :Buffers<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['FocusLost', 'CursorHold']
hook_post_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
	highlight = {
		enable = true,
		disable = {
			"cpp",
		}
	},
	indent = {
		enable = false,
	}
}
EOF
'''

